local i = {
    [" "] = "Whitespace",
    ['"'] = 'Balanced "',
    ["'"] = "Balanced '",
    ["`"] = "Balanced `",
    ["("] = "Balanced (",
    [")"] = "Balanced ) including white-space",
    [">"] = "Balanced > including white-space",
    ["<lt>"] = "Balanced <",
    ["]"] = "Balanced ] including white-space",
    ["["] = "Balanced [",
    ["}"] = "Balanced } including white-space",
    ["{"] = "Balanced {",
    ["?"] = "User Prompt",
    _ = "Underscore",
    a = "Argument",
    b = "Balanced ), ], }",
    c = "Class",
    d = "Digit(s)",
    e = "Word in CamelCase & snake_case",
    f = "Function",
    g = "Entire file",
    i = "Indent",
    o = "Block, conditional, loop",
    q = "Quote `, \", '",
    t = "Tag",
    u = "Use/call function & method",
    U = "Use/call without dot in name",
  }
  local a = vim.deepcopy(i)
  for k, v in pairs(a) do
    a[k] = v:gsub(" including.*", "")
  end

  local ic = vim.deepcopy(i)
  local ac = vim.deepcopy(a)

  for key, name in pairs({ n = "Next", l = "Last" }) do
    i[key] = vim.tbl_extend("force", { name = "Inside " .. name .. " textobject" }, ic)
    a[key] = vim.tbl_extend("force", { name = "Around " .. name .. " textobject" }, ac)
  end
-- print('DEBUGPRINT[1]: mini-old.lua:40: a=' .. vim.inspect(a))

-- a = {
--   [" "] = "Whitespace",
--   ['"'] = 'Balanced "',
--   ["'"] = "Balanced '",
--   ["("] = "Balanced (",
--   [")"] = "Balanced )",
--   ["<lt>"] = "Balanced <",
--   [">"] = "Balanced >",
--   ["?"] = "User Prompt",
--   U = "Use/call without dot in name",
--   ["["] = "Balanced [",
--   ["]"] = "Balanced ]",
--   _ = "Underscore",
--   ["`"] = "Balanced `",
--   a = "Argument",
--   b = "Balanced ), ], }",
--   c = "Class",
--   d = "Digit(s)",
--   e = "Word in CamelCase & snake_case",
--   f = "Function",
--   g = "Entire file",
--   i = "Indent",
--   l = {
--     [" "] = "Whitespace",
--     ['"'] = 'Balanced "',
--     ["'"] = "Balanced '",
--     ["("] = "Balanced (",
--     [")"] = "Balanced )",
--     ["<lt>"] = "Balanced <",
--     [">"] = "Balanced >",
--     ["?"] = "User Prompt",
--     U = "Use/call without dot in name",
--     ["["] = "Balanced [",
--     ["]"] = "Balanced ]",
--     _ = "Underscore",
--     ["`"] = "Balanced `",
--     a = "Argument",
--     b = "Balanced ), ], }",
--     c = "Class",
--     d = "Digit(s)",
--     e = "Word in CamelCase & snake_case",
--     f = "Function",
--     g = "Entire file",
--     i = "Indent",
--     name = "Around Last textobject",
--     o = "Block, conditional, loop",
--     q = "Quote `, \", '",
--     t = "Tag",
--     u = "Use/call function & method",
--     ["{"] = "Balanced {",
--     ["}"] = "Balanced }"
--   },
--   n = {
--     [" "] = "Whitespace",
--     ['"'] = 'Balanced "',
--     ["'"] = "Balanced '",
--     ["("] = "Balanced (",
--     [")"] = "Balanced )",
--     ["<lt>"] = "Balanced <",
--     [">"] = "Balanced >",
--     ["?"] = "User Prompt",
--     U = "Use/call without dot in name",
--     ["["] = "Balanced [",
--     ["]"] = "Balanced ]",
--     _ = "Underscore",
--     ["`"] = "Balanced `",
--     a = "Argument",
--     b = "Balanced ), ], }",
--     c = "Class",
--     d = "Digit(s)",
--     e = "Word in CamelCase & snake_case",
--     f = "Function",
--     g = "Entire file",
--     i = "Indent",
--     name = "Around Next textobject",
--     o = "Block, conditional, loop",
--     q = "Quote `, \", '",
--     t = "Tag",
--     u = "Use/call function & method",
--     ["{"] = "Balanced {",
--     ["}"] = "Balanced }"
--   },
--   o = "Block, conditional, loop",
--   q = "Quote `, \", '",
--   t = "Tag",
--   u = "Use/call function & method",
--   ["{"] = "Balanced {",
--   ["}"] = "Balanced }"
-- }
